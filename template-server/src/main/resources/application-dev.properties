server.port = 7080
spring.application.name = templateserver
server.servlet.context-path = /${spring.application.name}
server.tomcat.uri-encoding = UTF-8

#jackson
spring.jackson.property-naming-strategy = com.fasterxml.jackson.databind.PropertyNamingStrategy.SnakeCaseStrategy
spring.jackson.date-format = yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone = GMT+8

logging.level.root = DEBUG
swagger.enable = on
# mysql readwrite数据源
readwritedb.enable = on
jdbc.readwrite.driverClassName = com.mysql.jdbc.Driver
jdbc.readwrite.jdbcUrl = jdbc:mysql://dev:3306/hjm_pay?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true
jdbc.readwrite.username = hjm_dev
jdbc.readwrite.password = hjm_dev
jdbc.readwrite.connectionTimeout = 5000
jdbc.readwrite.idleTimeout = 1000
jdbc.readwrite.maximumPoolSize = 50
jdbc.readwrite.minimumIdle = 5

# read 数据源
readdb.enable = off
jdbc.read.driverClassName = com.mysql.jdbc.Driver
jdbc.read.jdbcUrl = jdbc:mysql://dev:3306/hjm?useUnicode=true&characterEncoding=utf8
jdbc.read.username = hjm_dev
jdbc.read.password = hjm_dev
jdbc.read.connectionTimeout = 5000
jdbc.read.idleTimeout = 1000
jdbc.read.maximumPoolSize = 50
jdbc.read.minimumIdle = 5
# public redis
public.redis.host = dev
public.redis.port = 6379
public.redis.password = hjmredis4008201099
# 连接超时时间（毫秒）
public.redis.timeout = 20000
# dev环境用的是2 真是吊的不行,共享内存还要分,namespace都没.吐槽下
public.redis.database = 2
# 连接池最大连接数（使用负值表示没有限制） 默认 8
public.redis.max-active = 12
# 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1
public.redis.max-wait = -1
# 连接池中的最大空闲连接 默认 8
public.redis.max-idle = 5
# 连接池中的最小空闲连接 默认 0
public.redis.min-idle = 0
# primary redis
private.redis.host = dev
private.redis.port = 6379
private.redis.password = hjmredis4008201099
# 连接超时时间（毫秒）
private.redis.timeout = 20000
# dev环境用的是2 真是吊的不行,共享内存还要分,namespace都没.吐槽下
private.redis.database = 1
# 连接池最大连接数（使用负值表示没有限制） 默认 8
private.redis.max-active = 12
# 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1
private.redis.max-wait = -1
# 连接池中的最大空闲连接 默认 8
private.redis.max-idle = 5
# 连接池中的最小空闲连接 默认 0
private.redis.min-idle = 0

#es
es.enable = off
elasticsearch.clusterNodes = dev_elk:9300
elasticsearch.clusterName = devapplication
elasticsearch.properties.transport.tcp.connect_timeout = 120s
elasticsearch.properties.client.transport.sniff = true
elasticsearch.properties.client.transport.ping_timeout = 5s
elasticsearch.properties.client.transport.nodes_sampler_interval = 5s
elasticsearch.properties.client.transport.ignore_cluster_name = false
#连接超时的时间
elasticsearch.readTimeout = 5s

# kafka producer
kafka.enable = off
kafka.producer.bootstrap-servers = localhost:9092
kafka.producer.retries = 3
kafka.producer.batch-size = 8096
kafka.producer.linger-ms = 5
kafka.producer.buffer-memory = 33554432

# kafka consumer

kafka.poll.timeout = 5000
kafka.consumer.bootstrap-servers = ${kafka.producer.bootstrap-servers}
kafka.consumer.group-id = ${spring.application.name}
kafka.consumer.enable-auto-commit = true
kafka.consumer.auto-commit-interval-ms = 2000
kafka.consumer.session-timeout-ms = 30000
kafka.consumer.max-poll-records = 100
kafka.consumer.max.poll.interval.ms = 5000
kafka.consumer.max.partition.fetch.bytes = 4194304

#earliest,latest
kafka.consumer.auto-offset-reset = latest
heartbeat.interval.ms = 10000
kafka.consumer.auto.startup = false
kafka.client.id = ${random.uuid}


#eureka

# 监控info地址
eureka.instance.status-page-url-path = ${server.servlet.context-path}/actuator/info
# 监控健康检查地址
eureka.instance.health-check-url-path = ${server.servlet.context-path}/actuator/health

# 是否注册到eureka
eureka.client.register-with-eureka = true

# 是否互相注册
eureka.client.fetch-registry = true

# 上一次收到client的心跳之后，等待下一次心跳的超时时间，在这个时间内若没收到下一次心跳，则将移除该instance
eureka.instance.lease-expiration-duration-in-seconds = 90
# 表示eureka client发送心跳给server端的频率
eureka.instance.lease-renewal-interval-in-seconds = 30

# 注册中心地址
eureka.client.service-url.defaultZone = http://${spring.profiles.active}:4040/eureka/

# 注册中心页面显示的instance名字:UP (1) - local:192.168.10.50:passportserver:9894:1675200952
eureka.instance.instance-id = ${spring.profiles.active}:${spring.cloud.client.ip-address}:${spring.application.name}:${server.port}:${random.int}

# feign暴露服务名称
eureka.instance.virtual-host-name = templateserver
# 注册时候是否显示ip
spring.cloud.inetutils.use-only-site-local-interfaces = true

# 注册时忽略的网卡
spring.cloud.inetutils.ignored-interfaces[0] = lo*
spring.cloud.inetutils.ignored-interfaces[1] = docker*

# 指定注册的ip dev环境需要指定外网
#spring.cloud.inetutils.default-ip-address = 120.132.70.125
eureka.instance.ip-address = 120.132.70.125
eureka.instance.prefer-ip-address = true
eureka.client.healthcheck.enable = true

# feign 是否启用 hystrix
feign.hystrix.enabled = true
# 资源隔离策略
hystrix.command.default.execution.isolation.strategy = THREAD
# hystrix 全局默认所有接口的超时时间是 10000 ms
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds = 5000
# 针对执行时间长的接口,单独配置超时时间 类名#方法名(入参类型) 一定要全部匹配
hystrix.command.AccountResource#accounted(Integer,String).execution.isolation.thread.timeoutInMilliseconds = 2000
# fallback并发数
hystrix.command.default.fallback.isolation.semaphore.maxConcurrentRequests = 10
# 是否开启缓存
hystrix.command.default.requestCache.enabled = false
# hystrix 默认请求的每个线程池大小
hystrix.threadpool.default.coreSize = 10
# hystrix 线程池扩容最大值,需要允许扩容 hystrix.threadpool.default.allowMaximumSizeToDivergeFromCoreSize=true
hystrix.threadpool.default.maximumSize = 20
# 是否允许扩容线程池
hystrix.threadpool.default.allowMaximumSizeToDivergeFromCoreSize = true
# 配置account 核心线程数
hystrix.threadpool.accountserver.coreSize = 15
# 配置account 最大线程数
hystrix.threadpool.accountserver.maximumSize = 20
# 队列策略
hystrix.threadpool.default.maxQueueSize = -1

# management 配置 与 web配置隔离

# 允许访问所有路径
management.endpoints.web.exposure.include = *
# management 端口号 每个项目都固定
management.server.port = 3${server.port}
# management 的 web root 目录
management.endpoints.web.base-path = /
